% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get-mfrs.r
\name{get_mfrs}
\alias{get_mfrs}
\title{Recover minimal functional routes}
\usage{
get_mfrs(graph, source, target, algorithm = NULL, silent = TRUE)
}
\arguments{
\item{graph}{An object of class \code{"igraph"}.}

\item{source, target}{Nodes of \code{graph}, as integer indices or character 
names.}

\item{algorithm}{An algorithm from Wang et al (2013) from among the
following:
\code{"dfs"} (depth-first search; Algorithm 1),
\code{"ilp"} (iterative integer linear programming; Algorithm 2), or
\code{"sgg"} (subgraph-growing; Algorithm 3).
\strong{Currently only Algorithm 1 is implemented.}}

\item{silent}{Whether to print updates on the progress of the algorithm
(deprecated).}
}
\description{
This function takes a graph \code{graph} (understood to be expanded if
necessary) with designated \code{source} and \code{target} nodes and finds
the minimal functional routes (MFRs) from \code{source} to \code{target}.
}
\examples{
# acyclic example
g <- example_acyclic
h <- expand_graph(g)
plot(h,
     layout = layout_as_tree,
     vertex.color = ifelse(V(h)$composite, "gray", "white"))
\dontrun{
h_mfrs <- rmfr:::mfrs_dfs(
  node_count = vcount(h),
  link_array = as_edgelist(h, names = FALSE),
  composite_nodes = which(vertex_attr(h, "composite")),
  source_node = 1,
  target_node = 10
)
}
h_mfrs <- get_mfrs(h, source = 1, target = 10)

par(mfrow = c(2, 3))
for (i in 1:h_mfrs$mfr_count) {
  h <- set_edge_attr(h, "MFR",
                     value = (as.numeric(E(h)) - 1) \%in\% h_mfrs$mfr_set[[i]])
  plot(h,
       layout = layout_as_tree,
       vertex.color = ifelse(V(h)$composite, "gray", "white"),
       edge.color = ifelse(edge_attr(h, "MFR"), "red", "black"),
       edge.width = ifelse(edge_attr(h, "MFR"), 3, 1))
}
par(mfrow = c(1, 1))

g_ <- contract_graph(h)

par(mfrow = c(2, 3))
for (i in 1:h_mfrs$mfr_count) {
  g_ <- set_edge_attr(g_, "MFR",
                      value = (as.numeric(E(g_)) - 1) \%in\% h_mfrs$mfr_set[[i]])
  plot(g_,
       layout = layout_as_tree,
       vertex.color = ifelse(V(g_)$composite, "gray", "white"),
       edge.color = ifelse(edge_attr(g_, "MFR"), "red", "black"),
       edge.width = ifelse(edge_attr(g_, "MFR"), 3, 1))
}
par(mfrow = c(1, 1))
}
\references{
Wang, R.-S., Sun, Z. & Albert, R. (2013) Minimal functional routes in 
directed graphs with dependent links. \emph{Intl. Trans. in Op. Res.}, 20, 
391--409.
}
\seealso{
expand_graph
}
