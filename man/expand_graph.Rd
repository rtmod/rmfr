% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expand-graph.r
\name{expand_graph}
\alias{expand_graph}
\alias{contract_graph}
\title{Expand a graph with dependent links to one with composite nodes}
\usage{
expand_graph(graph, synergy = NULL)

contract_graph(graph, composite = NULL)
}
\arguments{
\item{graph}{An \link[igraph:igraph]{igraph::igraph} object.}

\item{synergy}{Either a character string indicating the attribute of \code{graph}
that encodes link synergy or a list of vectors of dependent link IDs. If
\code{NULL}, uses the first available link attribute.}

\item{composite}{Either a character string indicating the attribute of
\code{graph} that tags compposite nodes or a vector of the composite node
IDs. If \code{NULL}, uses the first available node attribute.}
}
\description{
These functions transform between graphs with synergistic links
and "expanded" graphs with composite nodes that represent these synergies.
}
\details{
The function \code{expand_graph()} takes as input an \link[igraph:igraph]{igraph::igraph} object and
information on \emph{link synergy} (either as a link attribute or as a separate
list of link subsets) and returns the \emph{expanded graph} as an \code{"igraph"}
object with a logical node attribute \code{"composite"} indicating which nodes are
composite nodes.

The function \code{contract_graph()} takes as input an \code{"igraph"} object and
information on \emph{node composition} (either as a node attribute or as a
separate vector of node IDs) and returns the \emph{contracted graph} as an
\code{"igraph"} object with a logical link attribute \code{"synergy"} indicating which
subsets of links are synergistic.

Only composite nodes are added or deleted, so node IDs are preserved.
However, link IDs are not.
}
\examples{
# acyclic example
g <- example_acyclic
plot(g,
     layout = layout_as_tree,
     edge.color = ifelse(is.na(E(g)$synergy), "black", E(g)$synergy),
     edge.width = ifelse(is.na(E(g)$synergy), 1, 3))
h <- expand_graph(g)
plot(h,
     layout = layout_as_tree,
     vertex.color = ifelse(V(h)$composite, "gray", "white"))
g_ <- contract_graph(h)
plot(g_,
     layout = layout_as_tree,
     edge.color = ifelse(is.na(E(g_)$synergy), "black", E(g_)$synergy),
     edge.width = ifelse(is.na(E(g_)$synergy), 1, 3))

# cyclic example
g <- example_cyclic
plot(g,
     layout = layout_nicely,
     edge.color = ifelse(is.na(E(g)$synergy), "black", E(g)$synergy),
     edge.width = ifelse(is.na(E(g)$synergy), 1, 3))
h <- expand_graph(g)
plot(h,
     layout = layout_nicely,
     vertex.color = ifelse(V(h)$composite, "gray", "white"))
g_ <- contract_graph(h)
plot(g_,
     layout = layout_nicely,
     edge.color = ifelse(is.na(E(g_)$synergy), "black", E(g_)$synergy),
     edge.width = ifelse(is.na(E(g_)$synergy), 1, 3))
}
\references{
Wang, R.-S., Sun, Z. & Albert, R. (2013) Minimal functional routes in
directed graphs with dependent links. \emph{Intl. Trans. in Op. Res.}, 20,
391--409.
}
